/*
 * This source file was generated by the Gradle 'init' task
 */
package org.bingo;

import com.itextpdf.kernel.colors.DeviceRgb;
import com.itextpdf.kernel.geom.PageSize;
import org.bingo.config.AssetPaths;
import org.bingo.services.DocumentBuilder;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.bingo.config.DocumentConfig;
import org.bingo.config.PageConfig;

public class App {

    public static void main(String[] args) {
        try {
            String THEME_NAME = "Dark Academia";
            Path output = Paths.get("output");
            Path resources = Paths.get("resources");
            Path ONE_PER_PAGE_OUTPUT_FILE = output.resolve(THEME_NAME + "_1PerPage.pdf");
            Path TWO_PER_PAGE_OUTPUT_FILE = output.resolve(THEME_NAME + "_2PerPage.pdf");
            Path CALLING_CARDS_TOKENS_RULES_OUTPUT_FILE = output.resolve(
                    THEME_NAME + "_Calling Cards_Tokens_Rules.pdf"
            );

            AssetPaths onePerPageBingoPaths = AssetPaths.builder()
                    .framePath(resources.resolve("frame.png"))
                    .headerPath(resources.resolve("header.png"))
                    .iconsPath(resources.resolve("icons"))
                    .fontPath(resources.resolve("Dekko-Regular.ttf"))
                    .freeSpacePath(resources.resolve("Free Space.png"))
                    .instructionsPath(resources.resolve("How To Play.pdf"))
                    .scissorsIconPath(resources.resolve("Scissors.png"))
                    .tokenPath(resources.resolve("Token.png"))
                    .callingCardsHeaderPath(resources.resolve("calling_card_header.png"))
                    .build();

            DocumentConfig onePerPageBingoCards = DocumentConfig.builder()
                    .assets(onePerPageBingoPaths)
                    .outputPath(ONE_PER_PAGE_OUTPUT_FILE)
                    .fontColor(new DeviceRgb(88, 26, 77))
                    .marginTopInches(0.25f)
                    .marginBottomInches(0.25f)
                    .marginLeftInches(0.25f)
                    .marginRightInches(0.25f)
                    .build();

            DocumentConfig twoPerPageBingoCards = onePerPageBingoCards.toBuilder()
                    .outputPath(TWO_PER_PAGE_OUTPUT_FILE)
                    .pageSize(PageSize.LETTER.rotate())
                    .marginTopInches(0.625f)
                    .marginBottomInches(0.625f)
                    .build();

            DocumentConfig instructionsTokensCallingCards = onePerPageBingoCards.toBuilder()
                    .outputPath(CALLING_CARDS_TOKENS_RULES_OUTPUT_FILE)
                    .build();

            PageConfig portraitBingo = PageConfig.builder()
                    .headerSpacingTopInches(0.3f)
                    .headerSpacingRightInches(0.3f)
                    .headerSpacingBottomInches(0.3f)
                    .headerSpacingLeftInches(0.3f)
                    .gridLineColor(new DeviceRgb(125, 96, 85))
                    .gridRowAmount(5)
                    .gridColumnAmount(5)
                    .gridLineThicknessInches(0.0018f)
                    .gridSpacingRightInches(0.3f)
                    .gridSpacingLeftInches(0.3f)
                    .gridSpacingBottomInches(0.3f)
                    .labelHeightRatio(0.14f)
                    .cellSpacingXRatio(0.05f)
                    .cellSpacingYRatio(0.05f)
                    .cellGapRatio(0.05f)
                    .copies(100)
                    .build();

            PageConfig landscapeBingo = portraitBingo.toBuilder()
                    .build();

            PageConfig tokens = portraitBingo.toBuilder()
                    .gridLineColor(new DeviceRgb(115, 115, 115))
                    .gridRowAmount(9)
                    .gridColumnAmount(9)
                    .copies(1)
                    .headerSpacingTopInches(0f)
                    .headerSpacingLeftInches(0f)
                    .gridSpacingBottomInches(0f)
                    .gridSpacingRightInches(0f)
                    .gridSpacingLeftInches(0f)
                    .headerSpacingRightInches(6.8f)
                    .labelHeightRatio(0)
                    .build();

            PageConfig callingCardsSinglePage = portraitBingo.toBuilder()
                    .gridRowAmount(6)
                    .gridColumnAmount(5)
                    .copies(1)
                    .gridLineThicknessInches(0.022f)
                    .headerSpacingTopInches(0f)
                    .headerSpacingBottomInches(0.1f)
                    .gridSpacingRightInches(0f)
                    .gridSpacingLeftInches(0f)
                    .gridSpacingBottomInches(0f)
                    .build();

            PageConfig multiCallingCardsConfig = callingCardsSinglePage.toBuilder()
                    .gridRowAmount(2)
                    .gridColumnAmount(2)
                    .build();

            PageConfig multiCallingLastCardsConfig = multiCallingCardsConfig.toBuilder()
                    .gridRowAmount(1)
                    .build();

            DocumentBuilder.buildOnePerPageBingoCards(onePerPageBingoCards, portraitBingo);
            DocumentBuilder.buildTwoPerPageBingoCards(twoPerPageBingoCards, landscapeBingo);
            DocumentBuilder.buildInstructionsTokensCallingCards(instructionsTokensCallingCards,
                    tokens, callingCardsSinglePage,
                    multiCallingCardsConfig, multiCallingLastCardsConfig
            );
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
